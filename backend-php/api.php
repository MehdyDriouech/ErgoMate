<?php
/**
 * API Backend PHP pour Ergo Mate
 * Permet d'appeler l'API OpenRouter (Qwen3) de mani√®re s√©curis√©e
 */

// Configuration CORS
header('Access-Control-Allow-Origin: *'); // En production, remplacez * par votre domaine
header('Access-Control-Allow-Methods: POST, GET, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');
header('Content-Type: application/json; charset=utf-8');

// G√©rer les requ√™tes OPTIONS (preflight CORS)
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

// Charger la configuration
require_once 'config.php';

// V√©rifier que la cl√© API est configur√©e
if (!defined('OPENROUTER_API_KEY') || empty(OPENROUTER_API_KEY) || OPENROUTER_API_KEY === 'votre_cl√©_openrouter_ici') {
    http_response_code(500);
    echo json_encode([
        'error' => 'Cl√© API OpenRouter non configur√©e sur le serveur',
        'message' => 'Veuillez cr√©er le fichier config.php avec votre cl√© API OpenRouter'
    ]);
    exit();
}

// Route principale
$requestUri = $_SERVER['REQUEST_URI'];
$requestMethod = $_SERVER['REQUEST_METHOD'];

// Endpoint : GET / (test)
if ($requestMethod === 'GET' && preg_match('#/$|/index\.php$|/api\.php$#', $requestUri)) {
    echo json_encode([
        'status' => 'ok',
        'message' => 'Backend Ergo Mate API PHP - Serveur op√©rationnel',
        'version' => '2.0.0',
        'model' => OPENROUTER_MODEL,
        'timestamp' => date('c')
    ]);
    exit();
}

// Endpoint : POST /generate-questions
if ($requestMethod === 'POST' && preg_match('#/generate-questions#', $requestUri)) {
    generateQuestions();
    exit();
}

// Route non trouv√©e
http_response_code(404);
echo json_encode([
    'error' => 'Endpoint non trouv√©',
    'available_endpoints' => [
        'GET /' => 'Status du serveur',
        'POST /generate-questions' => 'G√©n√©ration de questions'
    ]
]);
exit();

/**
 * G√©n√®re des questions via l'API OpenRouter (Qwen3)
 */
function generateQuestions() {
    // R√©cup√©rer les donn√©es POST
    $input = file_get_contents('php://input');
    $data = json_decode($input, true);
    
    // Validation des donn√©es
    if (!$data) {
        http_response_code(400);
        echo json_encode([
            'error' => 'Donn√©es JSON invalides'
        ]);
        return;
    }
    
    if (!isset($data['text']) || !isset($data['config'])) {
        http_response_code(400);
        echo json_encode([
            'error' => 'Donn√©es manquantes. "text" et "config" sont requis.'
        ]);
        return;
    }
    
    $text = $data['text'];
    $config = $data['config'];
    $prompt = isset($data['prompt']) ? $data['prompt'] : buildPrompt($text, $config);
    
    // Log de la requ√™te (optionnel)
    error_log("üî• G√©n√©ration de {$config['questionCount']} questions avec Qwen3...");
    
    // Appel √† l'API OpenRouter
    $openRouterResponse = callOpenRouterAPI($prompt);
    
    if ($openRouterResponse['success']) {
        echo json_encode($openRouterResponse['data']);
    } else {
        http_response_code($openRouterResponse['http_code']);
        echo json_encode([
            'error' => $openRouterResponse['error'],
            'details' => $openRouterResponse['details']
        ]);
    }
}

/**
 * Appelle l'API OpenRouter via cURL
 */
function callOpenRouterAPI($prompt) {
    $url = 'https://openrouter.ai/api/v1/chat/completions';
    
    $payload = [
        'model' => OPENROUTER_MODEL,
        'messages' => [
            [
                'role' => 'user',
                'content' => $prompt
            ]
        ]
    ];
    
    $ch = curl_init($url);
    
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => json_encode($payload),
        CURLOPT_HTTPHEADER => [
            'Content-Type: application/json',
            'Authorization: Bearer ' . OPENROUTER_API_KEY,
            'HTTP-Referer: ' . APP_URL,
            'X-Title: ' . APP_NAME
        ],
        CURLOPT_TIMEOUT => API_TIMEOUT,
        CURLOPT_SSL_VERIFYPEER => true
    ]);
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $curlError = curl_error($ch);
    curl_close($ch);
    
    // Erreur cURL
    if ($curlError) {
        error_log("‚ùå Erreur cURL: $curlError");
        return [
            'success' => false,
            'http_code' => 500,
            'error' => 'Erreur de connexion √† l\'API OpenRouter',
            'details' => $curlError
        ];
    }
    
    // Erreur HTTP
    if ($httpCode !== 200) {
        $errorData = json_decode($response, true);
        error_log("‚ùå Erreur API OpenRouter (HTTP $httpCode): " . print_r($errorData, true));
        return [
            'success' => false,
            'http_code' => $httpCode,
            'error' => "Erreur API OpenRouter: $httpCode",
            'details' => $errorData
        ];
    }
    
    // Succ√®s
    $responseData = json_decode($response, true);
    
    if (!$responseData) {
        return [
            'success' => false,
            'http_code' => 500,
            'error' => 'R√©ponse API invalide',
            'details' => 'Impossible de parser la r√©ponse JSON'
        ];
    }
    
    // Extraire le contenu de la r√©ponse OpenRouter (format OpenAI)
    if (!isset($responseData['choices'][0]['message']['content'])) {
        return [
            'success' => false,
            'http_code' => 500,
            'error' => 'Format de r√©ponse inattendu',
            'details' => 'Le champ choices[0].message.content est manquant'
        ];
    }
    
    $content = $responseData['choices'][0]['message']['content'];
    
    // Nettoyage sp√©cifique pour Qwen3 qui peut ajouter du markdown
    $cleanedContent = cleanQwenResponse($content);
    
    // V√©rifier si le contenu nettoy√© est du JSON valide
    $jsonTest = json_decode($cleanedContent, true);
    if ($jsonTest === null && json_last_error() !== JSON_ERROR_NONE) {
        error_log("‚ö†Ô∏è R√©ponse Qwen3 n'est pas du JSON valide apr√®s nettoyage");
        error_log("Contenu original: " . substr($content, 0, 500));
        error_log("Contenu nettoy√©: " . substr($cleanedContent, 0, 500));
    }
    
    error_log("‚úÖ Questions g√©n√©r√©es avec succ√®s via Qwen3");
    
    // Adapter le format pour compatibilit√© avec le frontend (format Anthropic)
    return [
        'success' => true,
        'data' => [
            'content' => [
                [
                    'type' => 'text',
                    'text' => $cleanedContent
                ]
            ],
            'model' => $responseData['model'] ?? OPENROUTER_MODEL,
            'usage' => $responseData['usage'] ?? null
        ]
    ];
}

/**
 * Nettoie la r√©ponse de Qwen3 pour extraire le JSON pur
 * Qwen3 peut parfois ajouter du markdown ou du texte explicatif
 */
function cleanQwenResponse($content) {
    // Supprimer les balises markdown ```json et ```
    $cleaned = preg_replace('/```json\s*/i', '', $content);
    $cleaned = preg_replace('/```\s*$/i', '', $cleaned);
    $cleaned = preg_replace('/```/i', '', $cleaned);
    
    // Supprimer les espaces et retours √† la ligne au d√©but et √† la fin
    $cleaned = trim($cleaned);
    
    // Chercher le premier { et le dernier }
    $firstBrace = strpos($cleaned, '{');
    $lastBrace = strrpos($cleaned, '}');
    
    if ($firstBrace !== false && $lastBrace !== false && $lastBrace > $firstBrace) {
        // Extraire uniquement le JSON entre les accolades
        $cleaned = substr($cleaned, $firstBrace, $lastBrace - $firstBrace + 1);
    }
    
    // Supprimer d'√©ventuels textes explicatifs avant le JSON
    // Exemples: "Voici le JSON :", "D'accord, je g√©n√®re :", etc.
    $lines = explode("\n", $cleaned);
    $jsonStarted = false;
    $cleanedLines = [];
    
    foreach ($lines as $line) {
        $trimmedLine = trim($line);
        
        // Si la ligne commence par {, le JSON commence
        if (strpos($trimmedLine, '{') === 0) {
            $jsonStarted = true;
        }
        
        // Ne garder que les lignes apr√®s le d√©but du JSON
        if ($jsonStarted) {
            $cleanedLines[] = $line;
        }
    }
    
    if (!empty($cleanedLines)) {
        $cleaned = implode("\n", $cleanedLines);
    }
    
    return trim($cleaned);
}

/**
 * Construit le prompt optimis√© pour Qwen3
 */
function buildPrompt($text, $config) {
    $typeLabels = [
        'mcq' => 'QCM (Questions √† Choix Multiples)',
        'true_false' => 'Vrai/Faux',
        'fill_in' => 'Questions √† compl√©ter'
    ];
    
    $difficultyInstructions = [
        'facile' => 'Questions simples, concepts de base, d√©finitions directes',
        'moyen' => 'Questions de compr√©hension, application des concepts',
        'difficile' => 'Questions complexes, analyse, synth√®se, cas pratiques'
    ];
    
    $typesText = array_map(function($type) use ($typeLabels) {
        return "- " . $typeLabels[$type];
    }, $config['types']);
    
    // Limiter le texte si trop long
    $maxChars = 15000;
    $truncatedText = mb_strlen($text) > $maxChars 
        ? mb_substr($text, 0, $maxChars) . "\n\n[...texte tronqu√©...]" 
        : $text;
    
    $questionCount = $config['questionCount'];
    $difficulty = $config['difficulty'];
    $typesString = implode("\n", $typesText);
    $difficultyText = $difficultyInstructions[$difficulty];
    
    return <<<EOT
Tu es un expert p√©dagogique sp√©cialis√© dans la cr√©ation de contenus de r√©vision pour √©tudiants.

Ta mission : G√©n√©rer un th√®me de r√©vision complet au format JSON STRICT √† partir du texte de cours ci-dessous.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìö TEXTE DU COURS :
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

$truncatedText

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚öôÔ∏è PARAM√àTRES DE G√âN√âRATION :
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä QUANTIT√â EXACTE REQUISE :
‚Üí Tu DOIS g√©n√©rer EXACTEMENT $questionCount questions (ni plus, ni moins)
‚Üí R√©partis-les √©quitablement entre les types demand√©s

üéØ TYPES DE QUESTIONS √Ä G√âN√âRER :
$typesString

üìà NIVEAU DE DIFFICULT√â : $difficulty
‚Üí $difficultyText

‚úÖ R√àGLES DE QUALIT√â OBLIGATOIRES :
1. Chaque question teste UNE connaissance cl√© du cours
2. Les r√©ponses sont claires, pr√©cises et non ambigu√´s
3. Pour les QCM : 4 choix, 1 ou plusieur bonne r√©ponse, les mauvaises r√©ponses sont plausibles
4. Pour les Vrai/Faux : √©nonc√©s clairs et v√©rifiables
5. Pour les questions √† compl√©ter : r√©ponse courte et pr√©cise
6. Le champ "rationale" DOIT TOUJOURS √™tre rempli avec une explication p√©dagogique
7. Les questions couvrent diff√©rentes sections du cours
8. √âvite les questions pi√®ges, trop sp√©cifiques ou ambigu√´s
9. Utilise un fran√ßais correct et professionnel

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üö® FORMAT DE R√âPONSE - INSTRUCTIONS CRITIQUES üö®
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ö†Ô∏è ATTENTION : CES R√àGLES SONT ABSOLUMENT OBLIGATOIRES ‚ö†Ô∏è

‚úã INTERDICTIONS STRICTES :
‚ùå PAS de balises markdown (```json ou ```)
‚ùå PAS de texte explicatif avant le JSON
‚ùå PAS de texte explicatif apr√®s le JSON
‚ùå PAS de commentaires dans le JSON
‚ùå PAS de texte du type "Voici les questions..." ou "J'ai g√©n√©r√©..."
‚ùå PAS de retours √† la ligne superflus
‚ùå PAS de m√©lange de langues dans les cl√©s JSON (tout en anglais)

‚úÖ OBLIGATIONS STRICTES :
‚úì Commence DIRECTEMENT par le caract√®re {
‚úì Termine DIRECTEMENT par le caract√®re }
‚úì JSON valide et parsable
‚úì Respecte EXACTEMENT la structure ci-dessous
‚úì Tous les champs obligatoires pr√©sents
‚úì Types de donn√©es corrects (string, boolean, array, object)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìã STRUCTURE JSON EXACTE √Ä RESPECTER :
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

{
  "title": "Titre du th√®me en fran√ßais (bas√© sur le contenu du cours)",
  "description": "Description courte du th√®me (1-2 phrases maximum)",
  "tags": ["tag1", "tag2", "tag3"],
  "questions": [
    {
      "id": "q1",
      "type": "mcq",
      "prompt": "Question en fran√ßais ?",
      "choices": [
        {"id": "a", "label": "Premi√®re option de r√©ponse"},
        {"id": "b", "label": "Deuxi√®me option de r√©ponse"},
        {"id": "c", "label": "Troisi√®me option de r√©ponse"},
        {"id": "d", "label": "Quatri√®me option de r√©ponse"}
      ],
      "answer": "a",
      "rationale": "Explication claire en fran√ßais de pourquoi 'a' est la bonne r√©ponse"
    },
    {
      "id": "q2",
      "type": "true_false",
      "prompt": "Affirmation √† √©valuer (vrai ou faux)",
      "answer": true,
      "rationale": "Explication en fran√ßais de pourquoi c'est vrai ou faux"
    },
    {
      "id": "q3",
      "type": "fill_in",
      "prompt": "Question √† compl√©ter avec un ___ dans la phrase",
      "answer": "r√©ponse courte attendue",
      "rationale": "Explication en fran√ßais de la r√©ponse"
    }
  ]
}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí° EXEMPLES DE FORMAT :
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚úÖ CORRECT (ce que tu dois faire) :
{"title":"Biologie cellulaire","description":"Questions sur la structure...","tags":["biologie","cellule"],"questions":[...]}

‚ùå INCORRECT (ce que tu ne dois PAS faire) :
```json
{"title":"Biologie cellulaire"...}
```
Voici les questions g√©n√©r√©es pour le cours...

‚ùå INCORRECT (ce que tu ne dois PAS faire) :
D'accord, je vais g√©n√©rer les questions :
{"title":"Biologie cellulaire"...}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ CHECKLIST FINALE AVANT DE R√âPONDRE :
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

V√©rifie que :
‚òë Tu as g√©n√©r√© EXACTEMENT $questionCount questions
‚òë Les types de questions correspondent √† ceux demand√©s
‚òë Chaque question a un "id" unique (q1, q2, q3...)
‚òë Chaque question a un champ "rationale" rempli
‚òë Les QCM ont exactement 4 choix (a, b, c, d)
‚òë Les Vrai/Faux ont "answer": true ou "answer": false (boolean)
‚òë Le JSON est valide (pas de virgule en trop, guillemets corrects)
‚òë Ta r√©ponse commence par { et finit par }
‚òë Il n'y a AUCUN texte en dehors du JSON

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üöÄ G√âN√àRE MAINTENANT LE JSON :
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

R√©ponds UNIQUEMENT avec le JSON. Commence IMM√âDIATEMENT par le caract√®re {

EOT;
}
?>
